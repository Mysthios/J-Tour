import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:j_tour/models/place_model.dart';
import 'package:latlong2/latlong.dart';
import 'package:j_tour/providers/place_provider.dart';
import 'widgets/1_image_picker_widgets.dart';
import 'widgets/3_district_dropdown_widget.dart';
import 'widgets/4_location_picker_widget.dart';
import 'widgets/7_facilities_widget.dart';
import 'widgets/2_basic_info_widget.dart';
import 'widgets/5_operating_hours_widget.dart';
import 'widgets/6_pricing_widget.dart';

class CreatePlacePage extends ConsumerStatefulWidget {
  const CreatePlacePage({Key? key}) : super(key: key);

  @override
  ConsumerState<CreatePlacePage> createState() => _CreatePlacePageState();
}

class _CreatePlacePageState extends ConsumerState<CreatePlacePage> {
  late TextEditingController _nameController;
  late TextEditingController _locationController;
  late TextEditingController _descriptionController;
  late TextEditingController _weekdaysHoursController;
  late TextEditingController _weekendHoursController;
  late TextEditingController _priceController;
  late TextEditingController _weekendPriceController;

  File? _selectedImage;
  List<String> _facilities = [];
  List<String> _additionalImages = [];
  final _formKey = GlobalKey<FormState>();

  LatLng? _selectedLocation;
  String? _selectedCategory;

  @override
  void initState() {
    super.initState();
    _initializeControllers();
    _initializeLocation();
  }

  void _initializeControllers() {
    _nameController = TextEditingController();
    _locationController = TextEditingController();
    _descriptionController = TextEditingController();
    _weekdaysHoursController = TextEditingController(text: '06:00 - 17:00');
    _weekendHoursController = TextEditingController(text: '06:00 - 18:00');

    final currencyFormatter = NumberFormat.currency(
      locale: 'id_ID',
      symbol: '',
      decimalDigits: 0,
    );

    _priceController = TextEditingController(
      text: currencyFormatter.format(0),
    );

    _weekendPriceController = TextEditingController(
      text: currencyFormatter.format(0),
    );

    _facilities = [];
    _additionalImages = [];
  }

  void _initializeLocation() {
    _selectedLocation = LatLng(-8.1737, 113.6995);
  }

  @override
  void dispose() {
    _nameController.dispose();
    _locationController.dispose();
    _descriptionController.dispose();
    _weekdaysHoursController.dispose();
    _weekendHoursController.dispose();
    _priceController.dispose();
    _weekendPriceController.dispose();
    super.dispose();
  }

  void _saveChanges() async {
    if (_formKey.currentState!.validate()) {
      // Show loading indicator
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) {
          return const Center(
            child: CircularProgressIndicator(),
          );
        },
      );

      try {
        // Create Place object from form data
        final place = Place(
          id: '', // Will be generated by server
          name: _nameController.text,
          location: _locationController.text,
          description: _descriptionController.text,
          weekdaysHours: _weekdaysHoursController.text,
          weekendHours: _weekendHoursController.text,
          price: _parsePriceFromController(_priceController.text),
          weekendPrice: _parsePriceFromController(_weekendPriceController.text),
          weekdayPrice: _parsePriceFromController(_priceController
              .text), // Assuming weekday price same as regular price
          category: _selectedCategory ?? '',
          facilities: _facilities,
          latitude: _selectedLocation?.latitude ?? 0.0,
          longitude: _selectedLocation?.longitude ?? 0.0,
          image: _selectedImage?.path ?? '',
          isLocalImage: _selectedImage != null,
          additionalImages: _additionalImages,
          rating: 4.5, // Default rating
        );

        // Save using provider
        final success =
            await ref.read(placesNotifierProvider.notifier).addPlace(place);

        // Hide loading indicator
        Navigator.of(context).pop();

        if (success) {
          // Show success message
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Wisata berhasil ditambahkan!'),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 2),
            ),
          );

          // Wait a bit for the snackbar to show, then navigate back
          await Future.delayed(const Duration(milliseconds: 500));

          // Navigate back to homepage (or previous page)
          if (mounted) {
            Navigator.of(context).pop(); // Goes back to previous page
            // OR if you want to go back to a specific route:
            // Navigator.of(context).pushNamedAndRemoveUntil('/', (route) => false);
          }
        } else {
          // Show error message
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Gagal menambahkan wisata. Silakan coba lagi.'),
              backgroundColor: Colors.red,
            ),
          );
        }
      } catch (e) {
        // Hide loading indicator
        Navigator.of(context).pop();

        // Show error message
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Terjadi kesalahan: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

// Helper method to parse price from formatted text
  int _parsePriceFromController(String text) {
    // Remove all non-digit characters
    String cleanText = text.replaceAll(RegExp(r'[^\d]'), '');
    return int.tryParse(cleanText) ?? 0;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Tambah Wisata'),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
        elevation: 0,
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Image Picker Section
              ImagePickerWidgets(
                selectedImage: _selectedImage,
                additionalImages: _additionalImages,
                onMainImageChanged: (image) {
                  setState(() {
                    _selectedImage = image;
                  });
                },
                onAdditionalImagesChanged: (images) {
                  setState(() {
                    _additionalImages = images;
                  });
                },
              ),
              const SizedBox(height: 24),

              // Basic Information Section
              BasicInfoWidget(
                nameController: _nameController,
                descriptionController: _descriptionController,
                selectedCategory: _selectedCategory,
                onCategoryChanged: (category) {
                  setState(() {
                    _selectedCategory = category;
                  });
                },
              ),
              const SizedBox(height: 24),

              // District Dropdown Section
              DistrictDropdownWidget(
                locationController: _locationController,
              ),
              const SizedBox(height: 24),

              // Location Picker Section
              LocationPickerWidget(
                selectedLocation: _selectedLocation,
                onLocationChanged: (location) {
                  setState(() {
                    _selectedLocation = location;
                  });
                },
              ),
              const SizedBox(height: 24),

              // Operating Hours Section
              OperatingHoursWidget(
                weekdaysHoursController: _weekdaysHoursController,
                weekendHoursController: _weekendHoursController,
              ),
              const SizedBox(height: 24),

              // Pricing Section
              PricingWidget(
                priceController: _priceController,
                weekendPriceController: _weekendPriceController,
                onPriceChanged: (String) {},
                onWeekendPriceChanged: (String) {},
              ),
              const SizedBox(height: 24),

              // Facilities Section
              FacilitiesWidget(
                facilities: _facilities,
                onFacilitiesChanged: (facilities) {
                  setState(() {
                    _facilities = facilities;
                  });
                },
              ),
              const SizedBox(height: 24),

              // Save Button
              SizedBox(
                height: 48,
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _saveChanges,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.black,
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: const Text(
                    'Tambah Wisata',
                    style: TextStyle(
                      fontSize: 15,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 24),
            ],
          ),
        ),
      ),
    );
  }
}
